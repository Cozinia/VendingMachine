//Users
const char* const createTableUser = "CREATE TABLE Users (CNP INTEGER PRIMARY KEY, FirstName VARCHAR2(16), LastName VARCHAR2(16), Password VARCHAR2(12) NOT NULL,PhoneNumber VARCHAR2(10), Email VARCHAR2(16), TagNumber VARCHAR2(16), Credit NUMBER(4,2) NOT NULL, IsAdmin NUMBER(1) NOT NULL, IsActive NUMBER(1) NOT NULL);";

const char* const insertUser = "INSERT INTO Users (CNP, FirstName, LastName, Password, Credit, isAdmin, isActive) VALUES (19712073264,'Ion', 'Vasilescu', 'abc', 4.85, 1, 1);";

const char* insertUser2 = "INSERT INTO Users (CNP, FirstName, LastName, Password, Credit, isAdmin, isActive) VALUES  (29210144293, 'Maria', 'Ionescu', '346456',2.20, 0, 1 );";

const char* const sqlAllUsers = "SELECT * FROM Users;";

const char* const pragma = "PRAGMA page_size=512; VACUUM;";
//Products
//const char* createTableProducts = "CREATE TABLE Product (ID INTEGER PRIMARY KEY, Name VARCHAR2(30),Price NUMBER(2,1), Position NUMBER(1), isActive NUMBER(1) NOT NULL, Quantity NUMBER(2) NOT NULL);";


#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <stdio.h>
#include <stdlib.h>
#include <sqlite3.h>
#include <vfs.h>
#include <SPI.h>
#include <FS.h>
#include <Motor.h>
#include <PCF8574.h>
#include <LiquidCrystal_I2C.h>
#include <Logic.h>


extern "C" {
#include "user_interface.h"
}
using namespace System;
// initial stack
char* stack_start;
File db_file_obj_1;
int rc;
sqlite3* db1;
#define BufferSize 500
char tempBuffer[BufferSize];
char buffer[BufferSize];
int crtValue, prevValue;
int count;
float credit;
unsigned long crtTime, prevTime;
bool changed;
bool products = false;
int number;
unsigned long  Time1, Time2, Time3;
//CONNECT TO LOCAL NETWORK
ESP8266WebServer server(80);

const char* const ssid = "Telekom-167024";
const char* const password = "fU5vLVbCFfxga";

//char* ssid = "Telekom-00E3";
//char* password = "6DKY7ELEXZ9SZ";
//open file in SPIFFS memory

//----------Pins and adresses declaration---------------
const int CountPin = D3;
//Dispaly adress
LiquidCrystal_I2C lcd(0x27, 16, 2);

//setting adresses for motor extender
PCF8574 pcf8574(0x21);

const int DirXPin = P0;
const int StepXPin = P1;

const int DirYPin = P2;
const int StepYPin = P3;

const int DirZPin = P4;
const int StepZPin = P5;
const int  EnPin = P6;



void SetPcfPin(int pin, int value)
{
    if (pin == EnPin)
    {
        pcf8574.digitalWrite(pin, value);
    }
    else
    {
        pcf8574.digitalWrite(pin, value);
    }
}

Motor m1(EnPin, DirXPin, StepXPin, SetPcfPin);
Motor m2(EnPin, DirYPin, StepYPin, SetPcfPin);
Motor m3(EnPin, DirZPin, StepZPin, SetPcfPin);

int CheckPulses()
{
    int pulses = digitalRead(CountPin);
    return pulses;
}
Coin c1(CheckPulses);

void PulsEvent(Coin* sender)
{
    int pulses = 0;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Credit:");
    lcd.setCursor(1, 0);
    lcd.print(c1.CheckPulses(pulses));
    Serial.print("Credit .ino: \n");
    Serial.print(c1.CheckPulses(pulses));
    Serial.print("\n");
}

void GetIndexPage()
{
    File file = SPIFFS.open("/index.html", "r");
    server.streamFile(file, "text/html");
}

uint32_t stack_size()
{
    char stack;
    Serial.println((uint32_t)stack_start - (uint32_t)&stack);
}

//void RunCommand()
//{
//    buffer[0] = NULL;
//    String SQLCommand = server.arg("SQLCommand");
//
//    strcat(buffer, "[");
//    Serial.print("\nbuffer: ");
//    Serial.print(buffer);
//    const  char* persQuery = SQLCommand.c_str();
//    rc = db_exec(db1, persQuery);
//
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        server.send(200, "application/json", buffer);
//        return;
//    }
//    int len = strlen(buffer);
//    if (buffer[len - 2] == ',')
//    {
//        buffer[len - 2] = ']';
//    }
//    else
//    {
//        strcat(buffer, "]");
//    }
//    Serial.printf("buffer: %s", buffer);
//
//    server.send(200, "application/json", buffer);
//
//}

void LogIn()
{
    tempBuffer[0] = NULL;
    buffer[0] = NULL;
    strcat(buffer, "[");
    String UserCNP = server.arg("Username");
    String UserPassword = server.arg("Password");
    sprintf(tempBuffer, "SELECT FirstName, LastName, isAdmin,isActive from Users WHERE (CNP='%s') AND (Password='%s');", UserCNP.c_str(),UserPassword.c_str());
    Serial.print("\nbuffer: ");
    Serial.print(tempBuffer);
    const  char* userQuery = tempBuffer;
    rc = db_exec(db1, userQuery);

    int len = strlen(buffer);
    if (buffer[len - 2] == ',')
    {
        buffer[len - 2] = ']';
    }
    else
    {
        strcat(buffer, "]");
    }
    Serial.printf("buffer: %s", buffer);

    if (buffer == "[]")
    {
        server.send(602, "application/json", buffer);
    }

    if (rc != SQLITE_OK)
    {
        strcat(buffer, "]");
        server.send(602, "application/json", buffer);
        return;
    }
    else {
        server.send(200, "application/json", buffer);
    }
}

void Motor1()
{
    Serial.print("\nRotate motor m1");
    m1.Rotate(false, 200);
    server.send(200, "text/plain", "Rotate motor 1");

    for (int i = 30; i >= 0; i--)
    {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Test motor 1: ");
    }

   
}

void Motor2()
{
    Serial.print("\nRotate motor m2");
    m2.Rotate(false, 200);
    server.send(200, "text/plain", "Rotate motor 2");
    for (int i = 30; i >= 0; i--)
    {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Test motor 2: ");
    }
    

}

void Motor3()
{
    Serial.print("\nRotate motor m3");
    m3.Rotate(false, 200);
    server.send(200, "text/plain", "Rotate motor 3");
    for (int i = 30; i >= 0; i--)
    {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Test motor 3: ");
    }

}

//void Users() {
//    buffer[0] = NULL;
//    strcat(buffer, "[");
//    rc = db_exec(db1, sqlAllUsers);
//
//    int len = strlen(buffer);
//    if (buffer[len - 2] == ',')
//    {
//        buffer[len - 2] = ']';
//    }
//    else
//    {
//        strcat(buffer, "]");
//    }
//    Serial.printf("buffer: %s", buffer);
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        //Cannot found users
//        server.send(603, "application/json", buffer);
//        return;
//    }
//    else
//    {
//        server.send(200, "application/json", buffer);
//    }
//    
//}
//
//void EnableUser() {
//   
//    tempBuffer[0] = NULL;
//    buffer[0] = NULL;
//    strcat(buffer, "[");
//    String UserCNP = server.arg("CNP");
//    sprintf(tempBuffer, "UPDATE Users SET isActive = '1' WHERE CNP = %s; ", UserCNP.c_str());
//    Serial.print("\nbuffer: ");
//    Serial.print(tempBuffer);
//    const  char* userQuery = tempBuffer;
//    rc = db_exec(db1, userQuery);
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        server.send(200, "application/json", buffer);
//        return;
//    }
//    int len = strlen(buffer);
//    if (buffer[len - 2] == ',')
//    {
//        buffer[len - 2] = ']';
//    }
//    else
//    {
//        strcat(buffer, "]");
//    }
//    server.send(200, "application/json", buffer);
//
//}
//
//void DisableUser()
//{
//
//    tempBuffer[0] = NULL;
//    buffer[0] = NULL;
//    strcat(buffer, "[");
//    String UserCNP = server.arg("CNP");
//    sprintf(tempBuffer, "UPDATE Users SET isActive = '0' WHERE CNP = %s; ", UserCNP.c_str());
//    Serial.print("\nbuffer: ");
//    Serial.print(tempBuffer);
//    const  char* userQuery = tempBuffer;
//    rc = db_exec(db1, userQuery);
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        server.send(200, "application/json", buffer);
//        return;
//    }
//    int len = strlen(buffer);
//    if (buffer[len - 2] == ',')
//    {
//        buffer[len - 2] = ']';
//    }
//    else
//    {
//        strcat(buffer, "]");
//    }
//    server.send(200, "application/json", buffer);
//
//}
//
//void EditUser() {
//    tempBuffer[0] = NULL;
//    buffer[0] = NULL;
//    strcat(buffer, "[");
//    String UserCNP = server.arg("CNP");
//    String NewFirstName = server.arg("toEditFirstName");
//    String NewLastName = server.arg("toEditLastName");
//    String NewPassword = server.arg("toEditPassword");
//    String NewCredit = server.arg("toEditCredit");
//    String NewIsAdmin = server.arg("toEditAdmin");
//    String NewTagNumber = server.arg("toEditTagNumber");
//    sprintf(tempBuffer, "UPDATE Users SET FirstName = '%s', LastName = '%s', Password = '%s', Credit = '%s', IsAdmin = '%s', TagNumber = '%s' WHERE CNP = '%s'; ", NewFirstName.c_str(), NewLastName.c_str(), NewPassword.c_str(), NewCredit.c_str(), NewIsAdmin.c_str(), NewTagNumber.c_str(), UserCNP.c_str());
//    Serial.print("\nbuffer: ");
//    Serial.print(tempBuffer);
//    const  char* EditUserQuery = tempBuffer;
//    rc = db_exec(db1, EditUserQuery);
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        server.send(605, "application/json", buffer);
//        return;
//    }
//    else
//    {
//        int len = strlen(buffer);
//        if (buffer[len - 2] == ',')
//        {
//            buffer[len - 2] = ']';
//        }
//        else
//        {
//            strcat(buffer, "]");
//        }
//        server.send(200, "application/json", buffer);
//        
//    }
//
//}
//
//void AddUser() {
//    tempBuffer[0] = NULL;
//    buffer[0] = NULL;
//    strcat(buffer, "[");
//
//    String UserCNP = server.arg("AddCNP");
//    String FirstName = server.arg("AddFirstName");
//    String LastName = server.arg("AddLastName");
//    String Password = server.arg("AddPassword");
//    String IsAdmin = server.arg("CheckIfAdmin");
//    String TagNumber = server.arg("AddTagNumber");
//
//    sprintf(tempBuffer, "INSERT INTO Users(CNP, FirstName, LastName, Password, Credit, TagNumber, IsAdmin, IsActive) VALUES(%s, '%s', '%s', '%s', 0, '%s', %s, 1);", UserCNP.c_str(), FirstName.c_str(), LastName.c_str(), Password.c_str(), TagNumber.c_str(), IsAdmin.c_str());
//    Serial.print("\nbuffer: ");
//    Serial.print(tempBuffer);
//    const  char* EditUserQuery = tempBuffer;
//    rc = db_exec(db1, EditUserQuery);
//    if (rc != SQLITE_OK)
//    {
//        strcat(buffer, "]");
//        server.send(605, "application/json", buffer);
//        return;
//    }
//    else
//    {
//        int len = strlen(buffer);
//        if (buffer[len - 2] == ',')
//        {
//            buffer[len - 2] = ']';
//        }
//        else
//        {
//            strcat(buffer, "]");
//        }
//        server.send(200, "application/json", buffer);
//
//    }
//}

const char* const jsonUser = "{\"CNP\":%s, \"FirstName\": \"%s\", \"LastName\":\"%s\", \"isAdmin\": %s, \"Credit\": %s,\"TagNumber\": \"%s\", \"isActive\": %s}";

const char* const data = "Callback function called";
static int callback(void* data, int argc, char** argv, char** azColName)
{
    int i;
    //Serial.printf("%s: \r\n", (const char*)data);
    char localBuffer[50];
    strcat(buffer, "{");
    for (i = 0; i < argc; i++)
    {
        Serial.printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");

        if (i == argc - 1)
        {
            sniprintf(localBuffer, 50, "\"%s\": \"%s\"", azColName[i], argv[i] ? argv[i] : "NULL");
        }
        else
        {
            sniprintf(localBuffer, 50, "\"%s\": \"%s\", ", azColName[i], argv[i] ? argv[i] : "NULL");
        }
        strcat(buffer, localBuffer);
    }
    strcat(buffer, "}, ");

    return 0;
}


int db_open(const char* filename, sqlite3** db)
{
    int rc = sqlite3_open(filename, db);
    if (rc)
    {
        Serial.printf("Can't open database: %s\n", sqlite3_errmsg(*db));
        return rc;
    }
    else
    {
        Serial.printf("Opened database successfully\n");
    }
    return rc;
}

char* zErrMsg = 0;
int db_exec(sqlite3* db, const char* sql)
{
    Serial.print("\nPrinting SQL: ");
    Serial.print(sql);
    Serial.print("\n");


    Serial.println("\ndb_exec");
    int rc = sqlite3_exec(db, sql, callback, (void*)data, &zErrMsg);

    if (rc != SQLITE_OK)
    {
        Serial.printf("SQL error: %s\n", zErrMsg);
        for (int i = 0; i < strlen(zErrMsg); i++)
        {
            if (zErrMsg[i] == '\"')
            {
                zErrMsg[i] = '\'';
            }
        }
        strcat(buffer, "{ \"ErrorText\": \"");
        strcat(buffer, zErrMsg);
        strcat(buffer, "\"}");
        sqlite3_free(zErrMsg);
    }
    else
    {
        Serial.printf("Operation done successfully\n");
    }
    return rc;
}

void setup()
{
    system_update_cpu_freq(SYS_CPU_160MHZ);

    // init record of stack
    char stack;
    stack_start = &stack;

    Serial.begin(115200);
    Serial.println("Starting...");
    SPIFFS.begin();

    //Display setup 
    lcd.init();
    lcd.backlight();
    lcd.setBacklight(HIGH);

    pinMode(CountPin, INPUT);
    attachInterrupt(digitalPinToInterrupt(CountPin), EventCoin, CHANGE);

    pcf8574.pinMode(StepXPin, OUTPUT);
    pcf8574.pinMode(DirXPin, OUTPUT);
    pcf8574.pinMode(StepYPin, OUTPUT);
    pcf8574.pinMode(DirYPin, OUTPUT);
    pcf8574.pinMode(StepZPin, OUTPUT);
    pcf8574.pinMode(DirZPin, OUTPUT);
    pcf8574.pinMode(EnPin, OUTPUT);

    //----------------Declarations---------------------
    crtValue = 0;
    prevValue = 0;
    count = 0;
    crtTime = 0;
    prevTime = 0;
    changed = false;
    credit = 100.00;
    number = 0;
    Time1 = 0;
    Time2 = 0;
    Time3 = 0;

    if (pcf8574.begin())
    {
        Serial.println(":\n Sending data to PCF8574.");
    }
    else
    {
        Serial.println("Error while sending data to PCF8574.");
    }


    stack_size();
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(500);
    }
    Serial.println("");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    if (!SPIFFS.begin())
    {
        Serial.println("Failed to mount file system");
        return;
    }
    // see all files in SPIFFS memory   
    Dir dir = SPIFFS.openDir("");
    while (dir.next())
    {
        Serial.println(dir.fileName());
        Serial.println(dir.fileSize());
    }
    // remove existing file
    //SPIFFS.remove("/test1.db");
    SPIFFS.remove("/ico.ico");
    SPIFFS.remove("/VendingMachineDB.db");

    sqlite3_initialize();

    // Open databases
    vfs_set_spiffs_file_obj(&db_file_obj_1);
    if (db_open("/FLASH/VendingMachineDB.db", &db1))
        return;
    stack_size();

    //rc = db_exec(db1, pragma);
    //if (rc != SQLITE_OK)
    //{
    //    sqlite3_close(db1);
    //    return;
    //}

    //Create table
    rc = db_exec(db1, createTableUser);
    if (rc != SQLITE_OK)
    {
        sqlite3_close(db1);
        return;
    }
    stack_size();
    //Insert user into db
    rc = db_exec(db1, insertUser);
    if (rc != SQLITE_OK)
    {
        sqlite3_close(db1);
        return;
    }

    //Insert user into db
    rc = db_exec(db1, insertUser2);
    if (rc != SQLITE_OK)
    {
        sqlite3_close(db1);
        return;
    }
    m1.Rotate(false, 200);
   
    //for removing files use he commend bellow
    //SPIFFS.remove("/index.htm");

    server.on("/", GetIndexPage);
    server.on("/LogIn", LogIn);
    server.on("/Motor1", Motor1);
    server.on("/Motor2", Motor2);
    server.on("/Motor3", Motor3);
    //server.on("/RunCommand", RunCommand);
    //server.on("/Users", Users);
    //server.on("/EnableUser", EnableUser);
    //server.on("/DisableUser", DisableUser);
    //server.on("/EditUser", EditUser);
    //server.on("/AddUser", AddUser);
    
    server.begin();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Test display");

}

int checkMem = 0;
int initialized = false;
void loop()
{

    //if (!initialized)
    //{

    //    initialized = true;
    //}

    server.handleClient();
    m1.Process();   
    m2.Process();
    m3.Process();

    //if (!(checkMem % 1000000))
    //{
    //    Serial.printf("\r\nFree mem = %d", ESP.getFreeHeap());
    //   
    //}
    //checkMem++;

}

void Coins()
{
    crtTime = millis();

    if (crtTime > prevTime)
    {

        if (crtValue != prevValue)
        {
            prevTime = crtTime;

            prevValue = crtValue;
            changed = true;
        }

        if (crtTime - prevTime > 30 && changed)
        {
            count++;
            Serial.print(count);
            Serial.print("\n");
            changed = false;
            number++;
            Time1 = millis();
            changed = false;
        }
    }
    Time2 = millis();
    if ((Time2 - Time1 > TIMER) && (number))
    {

        Serial.print("Number: ");
        Serial.print(number);
        Serial.print("\n");
        Serial.print("Time2-Time1: ");
        Serial.print(Time2 - Time1);
        Serial.print("\n");

        if (number == 3)
        {
            credit = credit + 0.50;
           
            number = 0;
        }
        else
            if (number == 2)
            {
                credit = credit + 0.10;
               
                number = 0;
            }
            else
                if (number == 1)
                {
                   
                    credit = credit + 0.05;
                    number = 0;
                }
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Credit: ");
        lcd.setCursor(8, 0);
        lcd.print(credit);
        Serial.print("Credit: ");
        Serial.print(credit);
        Serial.print("\n");
    }

}

void EventCoin()
{
    crtValue = digitalRead(CountPin);

    Serial.print("CoinEVENT_____________");
    Serial.print("\n");
    Serial.print(crtValue);
    if (crtValue)
    {
        Coins();
    }
    Serial.print("\n");

}